{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"tinyFileDialogs.* Type Plugin Platforms Windows, Mac (coming soon!) Overview A Tiny File Dialogs plugin for Solar2D. Features: Opens a native file chooser dialog to select a file or multiple files. Open a native folder chooser dialog to select a folder. Open a native file save dialog to save a file. Syntax local tinyFileDialogs = require(\"plugin.tinyFileDialogs\") Functions tinyFileDialogs.openFileDialog() tinyFileDialogs.openFolderDialog() tinyFileDialogs.saveFileDialog() Project Settings To use this plugin, add an entry into the plugins table of build.settings . When added, the Solar2D build system will integrate the plugin during the build phase. settings = { plugins = { [ plugin.tinyFileDialogs ] = { publisherId = com.revolt64 , supportedPlatforms = { [ win32-sim ] = {url = https://github.com/DannyGlover/Solar2D-TinyFileDialogs-Plugin/raw/master/dist/v1/win32-sim/data.tgz }, [ mac-sim ] = {url = https://github.com/DannyGlover/Solar2D-TinyFileDialogs-Plugin/raw/master/dist/v1/mac-sim/data.tgz } } }, }, } How can I support you? I have a Patreon where you can support me. Any amount is appreciated. Thanks for your support!. Have any other plugins or interesting projects ? Yes! You can find my other projects at my Github page Technical Support / Issues GitHub","title":"Home"},{"location":"#tinyfiledialogs","text":"Type Plugin Platforms Windows, Mac (coming soon!)","title":"tinyFileDialogs.*"},{"location":"#overview","text":"A Tiny File Dialogs plugin for Solar2D. Features: Opens a native file chooser dialog to select a file or multiple files. Open a native folder chooser dialog to select a folder. Open a native file save dialog to save a file.","title":"Overview"},{"location":"#syntax","text":"local tinyFileDialogs = require(\"plugin.tinyFileDialogs\")","title":"Syntax"},{"location":"#functions","text":"","title":"Functions"},{"location":"#tinyfiledialogsopenfiledialog","text":"","title":"tinyFileDialogs.openFileDialog()"},{"location":"#tinyfiledialogsopenfolderdialog","text":"","title":"tinyFileDialogs.openFolderDialog()"},{"location":"#tinyfiledialogssavefiledialog","text":"","title":"tinyFileDialogs.saveFileDialog()"},{"location":"#project-settings","text":"To use this plugin, add an entry into the plugins table of build.settings . When added, the Solar2D build system will integrate the plugin during the build phase. settings = { plugins = { [ plugin.tinyFileDialogs ] = { publisherId = com.revolt64 , supportedPlatforms = { [ win32-sim ] = {url = https://github.com/DannyGlover/Solar2D-TinyFileDialogs-Plugin/raw/master/dist/v1/win32-sim/data.tgz }, [ mac-sim ] = {url = https://github.com/DannyGlover/Solar2D-TinyFileDialogs-Plugin/raw/master/dist/v1/mac-sim/data.tgz } } }, }, }","title":"Project Settings"},{"location":"#how-can-i-support-you","text":"I have a Patreon where you can support me. Any amount is appreciated. Thanks for your support!.","title":"How can I support you?"},{"location":"#have-any-other-plugins-or-interesting-projects","text":"Yes! You can find my other projects at my Github page","title":"Have any other plugins or interesting projects ?"},{"location":"#technical-support-issues","text":"GitHub","title":"Technical Support / Issues"},{"location":"openFileDialog/","text":"tinyFileDialogs.openFileDialog() Type Function Return value String , Table See also tinyFileDialogs.openFolderDialog() Overview Opens a native file chooser dialog to allow the user to select either a single file or multiple files. Gotchas Using the multiSelect option lets the user select multiple files from the file chooser dialog, but is limited to 32 selections due to path size limitations. It is advised to convey this in the file chooser dialog title, as the chooser itself does not have any functionality to impose this limit (this is an OS limitation, rather than a plugin issue). Syntax tinyFileDialogs.openFileDialog(options) The options table may contain the following properties: title (required) String . The title of the file dialog chooser window: e.g. Select a file . initialPath (optional) String . The initial path the file dialog chooser will start at: e.g. C:\\\\ . multiSelect (optional) Boolean . If the user is allowed to select mulitple files from the file chooser dialog, set this to true , default is false . singleFilterDescription (required) String . The description to show in the file dialog chooser's file type selector: e.g. Text File(s)| *.txt;*.rtf;*.md;*.doc;*.docx etc . filters (optional) Table . A table containing valid file extensions that the user may select. FIle types not defined in this table will not be displayed in the file chooser dialog: e.g. {\"*.txt\", \"*.rtf\", \"*.md\", \"*.doc\", \"*.docx\"} . Return value tinyFileDialogs.openFileDialog() If the user has selected a single file, this returns a String which contains the path to the selected file. If the user has selected more than one file, this returns a Table containing a list of paths for each selected file. Example local tinyFileDialogs = require( plugin.tinyFileDialogs ) local json = require( json ) local foundFiles = tinyFileDialogs.openFileDialog( { title = Select Files (limited to 32 files) , initialPath = os.getenv( HOME ), filters = { *.txt , *.rtf , *.md , *.doc , *.docx }, singleFilterDescription = Text File(s)| *.txt;*.rtf;*.md;*.doc;*.docx etc , multiSelect = true } ) local foundFileType = type(foundFiles) if (foundFileType == string ) then print(foundFiles) elseif (foundFileType == table ) then print(json.prettify(foundFiles)) end","title":"tinyFileDialogs.openFileDialog()"},{"location":"openFileDialog/#tinyfiledialogsopenfiledialog","text":"Type Function Return value String , Table See also tinyFileDialogs.openFolderDialog()","title":"tinyFileDialogs.openFileDialog()"},{"location":"openFileDialog/#overview","text":"Opens a native file chooser dialog to allow the user to select either a single file or multiple files.","title":"Overview"},{"location":"openFileDialog/#gotchas","text":"Using the multiSelect option lets the user select multiple files from the file chooser dialog, but is limited to 32 selections due to path size limitations. It is advised to convey this in the file chooser dialog title, as the chooser itself does not have any functionality to impose this limit (this is an OS limitation, rather than a plugin issue).","title":"Gotchas"},{"location":"openFileDialog/#syntax","text":"tinyFileDialogs.openFileDialog(options) The options table may contain the following properties: title (required) String . The title of the file dialog chooser window: e.g. Select a file . initialPath (optional) String . The initial path the file dialog chooser will start at: e.g. C:\\\\ . multiSelect (optional) Boolean . If the user is allowed to select mulitple files from the file chooser dialog, set this to true , default is false . singleFilterDescription (required) String . The description to show in the file dialog chooser's file type selector: e.g. Text File(s)| *.txt;*.rtf;*.md;*.doc;*.docx etc . filters (optional) Table . A table containing valid file extensions that the user may select. FIle types not defined in this table will not be displayed in the file chooser dialog: e.g. {\"*.txt\", \"*.rtf\", \"*.md\", \"*.doc\", \"*.docx\"} .","title":"Syntax"},{"location":"openFileDialog/#return-value","text":"tinyFileDialogs.openFileDialog() If the user has selected a single file, this returns a String which contains the path to the selected file. If the user has selected more than one file, this returns a Table containing a list of paths for each selected file.","title":"Return value"},{"location":"openFileDialog/#example","text":"local tinyFileDialogs = require( plugin.tinyFileDialogs ) local json = require( json ) local foundFiles = tinyFileDialogs.openFileDialog( { title = Select Files (limited to 32 files) , initialPath = os.getenv( HOME ), filters = { *.txt , *.rtf , *.md , *.doc , *.docx }, singleFilterDescription = Text File(s)| *.txt;*.rtf;*.md;*.doc;*.docx etc , multiSelect = true } ) local foundFileType = type(foundFiles) if (foundFileType == string ) then print(foundFiles) elseif (foundFileType == table ) then print(json.prettify(foundFiles)) end","title":"Example"},{"location":"openFolderDialog/","text":"tinyFileDialogs.openFolderDialog() Type Function Return value String See also tinyFileDialogs.openFileDialog() Overview Opens a native folder chooser dialog to allow the user to select a single folder. Syntax tinyFileDialogs.openFolderDialog(options) The options table may contain the following properties: title (required) String . The title of the folder dialog chooser window: e.g. Select a file . initialPath (optional) String . The initial path the folder dialog chooser will start at: e.g. C:\\\\ . Return value tinyFileDialogs.openFolderDialog() returns a String that contains the path to the selected folder. Example local tinyFileDialogs = require( plugin.tinyFileDialogs ) local foundFolder = tinyFileDialogs.openFolderDialog( { title = Select Folder , initialPath = os.getenv( HOME ) } ) local foundFolderType = type(foundFiles) if (foundFolderType ~= nil) then print(foundFolder) end","title":"tinyFileDialogs.openFolderDialog()"},{"location":"openFolderDialog/#tinyfiledialogsopenfolderdialog","text":"Type Function Return value String See also tinyFileDialogs.openFileDialog()","title":"tinyFileDialogs.openFolderDialog()"},{"location":"openFolderDialog/#overview","text":"Opens a native folder chooser dialog to allow the user to select a single folder.","title":"Overview"},{"location":"openFolderDialog/#syntax","text":"tinyFileDialogs.openFolderDialog(options) The options table may contain the following properties: title (required) String . The title of the folder dialog chooser window: e.g. Select a file . initialPath (optional) String . The initial path the folder dialog chooser will start at: e.g. C:\\\\ .","title":"Syntax"},{"location":"openFolderDialog/#return-value","text":"tinyFileDialogs.openFolderDialog() returns a String that contains the path to the selected folder.","title":"Return value"},{"location":"openFolderDialog/#example","text":"local tinyFileDialogs = require( plugin.tinyFileDialogs ) local foundFolder = tinyFileDialogs.openFolderDialog( { title = Select Folder , initialPath = os.getenv( HOME ) } ) local foundFolderType = type(foundFiles) if (foundFolderType ~= nil) then print(foundFolder) end","title":"Example"},{"location":"saveFileDialog/","text":"tinyFileDialogs.saveFileDialog() Type Function Return value String See also tinyFileDialogs.openFileDialog() Overview Opens a native file chooser dialog to allow the user to select a path file name to save a file as. Gotchas Despite its name, this function does not save any files. It merely provides you with the path and file name the user entered. You can then use that string to save whatever files you need to using the various Solar file functions. Syntax tinyFileDialogs.saveFileDialog(options) The options table may contain the following properties: title (required) String . The title of the file save dialog window: e.g. Select a file . initialPath (optional) String . The initial path the file save dialog will start at: e.g. C:\\\\ . singleFilterDescription (required) String . The description to show in the file save dialog file type selector: e.g. Text File(s)| *.txt;*.rtf;*.md;*.doc;*.docx etc . filters (optional) Table . A table containing valid file extensions that the user may select. FIle types not defined in this table will not be displayed in the file save dialog: e.g. {\"*.txt\", \"*.rtf\", \"*.md\", \"*.doc\", \"*.docx\"} . Return value tinyFileDialogs.saveFileDialog() returns a String which contains the full path to the selected file. Example local tinyFileDialogs = require( plugin.tinyFileDialogs ) local savedFile = tinyFileDialogs.saveFileDialog( { title = Save file as , initialPath = os.getenv( HOME ), filters = { *.txt , *.rtf , *.md , *.doc , *.docx }, singleFilterDescription = Text File(s)| *.txt;*.rtf;*.md;*.doc;*.docx etc } ) if (savedFile ~= nil) then print(savedFile) end","title":"tinyFileDialogs.saveFileDialog()"},{"location":"saveFileDialog/#tinyfiledialogssavefiledialog","text":"Type Function Return value String See also tinyFileDialogs.openFileDialog()","title":"tinyFileDialogs.saveFileDialog()"},{"location":"saveFileDialog/#overview","text":"Opens a native file chooser dialog to allow the user to select a path file name to save a file as.","title":"Overview"},{"location":"saveFileDialog/#gotchas","text":"Despite its name, this function does not save any files. It merely provides you with the path and file name the user entered. You can then use that string to save whatever files you need to using the various Solar file functions.","title":"Gotchas"},{"location":"saveFileDialog/#syntax","text":"tinyFileDialogs.saveFileDialog(options) The options table may contain the following properties: title (required) String . The title of the file save dialog window: e.g. Select a file . initialPath (optional) String . The initial path the file save dialog will start at: e.g. C:\\\\ . singleFilterDescription (required) String . The description to show in the file save dialog file type selector: e.g. Text File(s)| *.txt;*.rtf;*.md;*.doc;*.docx etc . filters (optional) Table . A table containing valid file extensions that the user may select. FIle types not defined in this table will not be displayed in the file save dialog: e.g. {\"*.txt\", \"*.rtf\", \"*.md\", \"*.doc\", \"*.docx\"} .","title":"Syntax"},{"location":"saveFileDialog/#return-value","text":"tinyFileDialogs.saveFileDialog() returns a String which contains the full path to the selected file.","title":"Return value"},{"location":"saveFileDialog/#example","text":"local tinyFileDialogs = require( plugin.tinyFileDialogs ) local savedFile = tinyFileDialogs.saveFileDialog( { title = Save file as , initialPath = os.getenv( HOME ), filters = { *.txt , *.rtf , *.md , *.doc , *.docx }, singleFilterDescription = Text File(s)| *.txt;*.rtf;*.md;*.doc;*.docx etc } ) if (savedFile ~= nil) then print(savedFile) end","title":"Example"}]}